"use strict";var Lexer=require("./lexer"),Expression=require("./expressions").Expression,Fraction=require("./fractions"),Equation=require("./equations"),Parser=function(){this.lexer=new Lexer,this.current_token=null};Parser.prototype.update=function(){this.current_token=this.lexer.token()},Parser.prototype.match=function(t){if(null===this.current_token)return"epsilon"===t;switch(t){case"plus":return"OPERATOR"===this.current_token.type&&"PLUS"===this.current_token.value;case"minus":return"OPERATOR"===this.current_token.type&&"MINUS"===this.current_token.value;case"multiply":return"OPERATOR"===this.current_token.type&&"MULTIPLY"===this.current_token.value;case"power":return"OPERATOR"===this.current_token.type&&"POWER"===this.current_token.value;case"divide":return"OPERATOR"===this.current_token.type&&"DIVIDE"===this.current_token.value;case"equal":return"OPERATOR"===this.current_token.type&&"EQUALS"===this.current_token.value;case"lparen":return"PAREN"===this.current_token.type&&"L_PAREN"===this.current_token.value;case"rparen":return"PAREN"===this.current_token.type&&"R_PAREN"===this.current_token.value;case"num":return"NUMBER"===this.current_token.type;case"id":return"IDENTIFIER"===this.current_token.type;default:return!1}},Parser.prototype.parse=function(t){return this.lexer.input(t),this.update(),this.parseEqn()},Parser.prototype.parseEqn=function(){var t=this.parseExpr();if(this.match("equal")){this.update();var r=this.parseExpr();return new Equation(t,r)}if(this.match("epsilon"))return t;throw new SyntaxError("Unbalanced Parenthesis")},Parser.prototype.parseExpr=function(){var t=this.parseTerm();return this.parseExprRest(t)},Parser.prototype.parseExprRest=function(t){if(this.match("plus")){this.update();var r=this.parseTerm();if(void 0===t||void 0===r)throw new SyntaxError("Missing operand");return this.parseExprRest(t.add(r))}if(this.match("minus")){this.update();var e=this.parseTerm();return void 0===t?this.parseExprRest(e.multiply(-1)):this.parseExprRest(t.subtract(e))}return t},Parser.prototype.parseTerm=function(){var t=this.parseFactor();return this.parseTermRest(t)},Parser.prototype.parseTermRest=function(t){if(this.match("multiply")){this.update();var r=this.parseFactor();return t.multiply(this.parseTermRest(r))}if(this.match("power")){this.update();var e=this.parseFactor();return this.parseTermRest(t.pow(parseInt(e.toString())))}if(this.match("divide")){this.update();var s=this.parseFactor();return this.parseTermRest(t.divide(this.convertToFraction(s)))}if(this.match("epsilon"))return t;var n=this.parseFactor();return void 0===n?t:t.multiply(this.parseTermRest(n))},Parser.prototype.convertToFraction=function(t){if(t.terms.length>0)throw new TypeError("Invalid Argument ("+t.toString()+"): Divisor must be of type Integer or Fraction.");var r=t.constants[0];return new Fraction(r.numer,r.denom)},Parser.prototype.parseFactor=function(){if(this.match("num")){var t=this.parseNumber();return this.update(),t}if(this.match("id")){var r=new Expression(this.current_token.value);return this.update(),r}if(this.match("lparen")){this.update();var e=this.parseExpr();if(this.match("rparen"))return this.update(),e;throw new SyntaxError("Unbalanced Parenthesis")}return void 0},Parser.prototype.parseNumber=function(){if(parseInt(this.current_token.value)==this.current_token.value)return new Expression(parseInt(this.current_token.value));var t=this.current_token.value.split("."),r=t[1].length,e=Math.pow(10,r),s=parseFloat(this.current_token.value);return new Expression(parseInt(s*e)).divide(e)},module.exports=Parser;
