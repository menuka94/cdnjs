var isInt=require("./helper").isInt,gcd=require("./helper").gcd,lcm=require("./helper").lcm,Fraction=function(t,n){if(0===n)throw new EvalError("Divide By Zero");if(!isInt(t)||!isInt(n))throw new TypeError("Invalid Argument ("+t.toString()+","+n.toString()+"): Divisor and dividend must be of type Integer.");this.numer=t,this.denom=n};Fraction.prototype.copy=function(){return new Fraction(this.numer,this.denom)},Fraction.prototype.reduce=function(){var t=this.copy(),n=gcd(t.numer,t.denom);return t.numer=t.numer/n,t.denom=t.denom/n,-1==Math.sign(t.denom)&&1==Math.sign(t.numer)&&(t.numer*=-1,t.denom*=-1),t},Fraction.prototype.equalTo=function(t){if(t instanceof Fraction){var n=this.reduce(),r=t.reduce();return n.numer===r.numer&&n.denom===r.denom}return!1},Fraction.prototype.add=function(t,n){n=void 0===n?!0:n;var r,e;if(t instanceof Fraction)r=t.numer,e=t.denom;else{if(!isInt(t))throw new TypeError("Invalid Argument ("+t.toString()+"): Summand must be of type Fraction or Integer.");r=t,e=1}var o=this.copy();if(this.denom==e)o.numer+=r;else{var i=lcm(o.denom,e),u=i/o.denom,a=i/e;o.numer*=u,o.denom*=u,r*=a,o.numer+=r}return n?o.reduce():o},Fraction.prototype.subtract=function(t,n){n=void 0===n?!0:n;var r=this.copy();if(t instanceof Fraction)return r.add(new Fraction(-t.numer,t.denom),n);if(isInt(t))return r.add(new Fraction(-t,1),n);throw new TypeError("Invalid Argument ("+t.toString()+"): Subtrahend must be of type Fraction or Integer.")},Fraction.prototype.multiply=function(t,n){n=void 0===n?!0:n;var r,e;if(t instanceof Fraction)r=t.numer,e=t.denom;else if(isInt(t)&&t)r=t,e=1;else{if(0!==t)throw new TypeError("Invalid Argument ("+t.toString()+"): Multiplicand must be of type Fraction or Integer.");r=0,e=1}var o=this.copy();return o.numer*=r,o.denom*=e,n?o.reduce():o},Fraction.prototype.divide=function(t,n){if(n=void 0===n?!0:n,0===t.valueOf())throw new EvalError("Divide By Zero");var r=this.copy();if(t instanceof Fraction)return r.multiply(new Fraction(t.denom,t.numer),n);if(isInt(t))return r.multiply(new Fraction(1,t),n);throw new TypeError("Invalid Argument ("+t.toString()+"): Divisor must be of type Fraction or Integer.")},Fraction.prototype.pow=function(t,n){n=void 0===n?!0:n;var r=this.copy();return r.numer=Math.pow(r.numer,t),r.denom=Math.pow(r.denom,t),n?r.reduce():r},Fraction.prototype.abs=function(){var t=this.copy();return t.numer=Math.abs(t.numer),t.denom=Math.abs(t.denom),t},Fraction.prototype.valueOf=function(){return this.numer/this.denom},Fraction.prototype.toString=function(){return 0===this.numer?"0":1===this.denom?this.numer.toString():-1===this.denom?(-this.numer).toString():this.numer+"/"+this.denom},Fraction.prototype.toTex=function(){return 0===this.numer?"0":1===this.denom?this.numer.toString():-1===this.denom?(-this.numer).toString():"\\frac{"+this.numer+"}{"+this.denom+"}"},Fraction.prototype._squareRootIsRational=function(){if(0===this.valueOf())return!0;var t=Math.sqrt(this.numer),n=Math.sqrt(this.denom);return isInt(t)&&isInt(n)},Fraction.prototype._cubeRootIsRational=function(){if(0===this.valueOf())return!0;var t=Math.cbrt(this.numer),n=Math.cbrt(this.denom);return isInt(t)&&isInt(n)},module.exports=Fraction;
